// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: remotepos.proto

#include "remotepos.pb.h"
#include "remotepos.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace remotepos {

static const char* PositionServer_method_names[] = {
  "/remotepos.PositionServer/updatePosition",
};

std::unique_ptr< PositionServer::Stub> PositionServer::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PositionServer::Stub> stub(new PositionServer::Stub(channel));
  return stub;
}

PositionServer::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_updatePosition_(PositionServer_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status PositionServer::Stub::updatePosition(::grpc::ClientContext* context, const ::remotepos::PosData& request, ::remotepos::Status* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_updatePosition_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::remotepos::Status>* PositionServer::Stub::AsyncupdatePositionRaw(::grpc::ClientContext* context, const ::remotepos::PosData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::remotepos::Status>::Create(channel_.get(), cq, rpcmethod_updatePosition_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::remotepos::Status>* PositionServer::Stub::PrepareAsyncupdatePositionRaw(::grpc::ClientContext* context, const ::remotepos::PosData& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::remotepos::Status>::Create(channel_.get(), cq, rpcmethod_updatePosition_, context, request, false);
}

PositionServer::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PositionServer_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PositionServer::Service, ::remotepos::PosData, ::remotepos::Status>(
          std::mem_fn(&PositionServer::Service::updatePosition), this)));
}

PositionServer::Service::~Service() {
}

::grpc::Status PositionServer::Service::updatePosition(::grpc::ServerContext* context, const ::remotepos::PosData* request, ::remotepos::Status* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace remotepos

